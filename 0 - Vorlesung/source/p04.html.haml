---
title: Praktikum 4 - Architekturbewertung
---
.boxed.push-down-45
  .row
    .col-xs-12.col-sm-10.col-sm-offset-1
      .slides-box
        %h3 Praktikum Architektur von Informationssystemen
        %h5 Sommersemester 2016 – Aufgabe 4
        %p
          Nils Löwe <nils.loewe@haw-hamburg.de>, Tel. 0176 / 574 550 65

        %h5 Rahmenbedingungen für das Praktikum

        %p
          %ul
            %li Die Bearbeitung findet in 3er-Gruppen statt.
            %li Die Präsentation Ihrer Lösungen erfolgt im Rahmen der Praktikumstermine.
            %li Jede Gruppe hat dazu 15-20 Minuten Zeit. Bereiten Sie hierzu Folien vor.

        %h4 ACHTUNG: Alle Gruppen präsentieren Ihre Lösung in der letzten Vorlesungswoche am 9.6.!

        %h5 Aufgabe 4: Architekturbewertung

        %p
          Hintergrund: Neben dem Architekturentwurf den Sie für das letzte Praktikum erstellt haben, wurde
          von einem Nachbarteam ein weiterer Entwurf vorgeschlagen. Sie sollen den vorgeschlagenen Entwurf
          bewerten und die Vor-/Nachteile gegenüber Ihrem eigenen Entwurf analysieren und präsentieren.

        %p
          Der Rahmen des Projekts ist die zuvor beschriebene Zeitplanungssoftware für einen
          Anbieter von Wartungen von Windenergieanlagen. Die Software hat eine Anbindung
          die Kundendatenbank und die Mitarbeiterdatenbank. Als Kundendatenbank wird "SugarCRM"
          eingesetzt und die Mitarbeiterdatenbank ist eine einfache MySQL Datenbank.

        %p
          Das Ergebnis dieser Aufgabe soll wieder eine reine Präsentation sein, es muss kein
          Code geschrieben werden

        .color-box
          %h5 Aufgabenbeschreibung

          %p
            Bewerten Sie den unten vorgeschlagenen Architekturentwurf in Bezug auf die folgenden Kriterien:
            %ul
              %li Vollständigkeit des Entwurfs (inhaltliche Anforderungen)
              %li Können die nichtfunktionalen Anforderungen erfüllt werden?
              %li Eignung der vorgeschlagenen Technologien
              %li Komplexität des Entwurfs
              %li Umsetzbarkeit in mehreren Teams
            Vergleichen Sie anschließend den vorgeschlagenen Architekturentwurf mt Ihrem eigenen aus dem
            letzten Praktikum und stellen Sie die Unterschiede heraus. Wo hat der vorgeschlagene Entwurf
            Stärken und wo hat er Schwächen gegenüber Ihrem eigenen Entwurf?

          %hr
          %h2 Aufgabe der geplanten Softwrae
          %h4 Use Cases
          %p
            %ul
              %li Eine Servicekraft greift lesend auf seinen/ihren Wochenplan zu.
              %li Ein "Planer" erstellt 1x/Woche die Wochenpläne.
              %li Servicekräfte werden per E-Mail über neue Pläne, bzw. Änderungen informiert.

          %h4 Funktion: Zugriff auf die Pläne
          %p
            %ul
              %li Die Pläne sollen über ein Web-Interface mit user/Passwort login lesbar sein.
              %li Die Pläne sollen zusätzlich über eine REST API abrufbar sein, um ggf. Android/iPhone Apps zu unterstützen.

          %h4 Funktion: Erstellen der Pläne
          %p
            %ul
              %li Die Pläne sollen teil-automatisiert erstellt werden. Basierend auf den Vorgaben macht die Software einen ersten Vorschlag, der dann manuell geprüft und vervollständigt wird.
              %li Die Pläne werden an einem Bürorechner erstellt, ob die Software eine Webanwendung oder eine Desktopanwendung ist, ist dabei egal.
              %li Die Vorgaben für die Pläne bestehen aus der Verfügbarkeit der Servicekräfte, den anstehenden Wartungsterminen für die Woche und dem prozentualen Puffer, der für jede Servicekraft für Notfälle vorgehalten werden soll.
              %li Die Verfügbarkeit und der Puffer werden direkt aus der MySQL Datenbank gelesen.
              %li Die Wartungstermine werden per REST API aus dem SugarCRM ausgelesen. Ein Wartungstermin enthält u.a. die Angaben über Anfahrtdauer und Dauer der Wartung (1 Stunde min / 2 Tage max.)
              %li Ist ein Plan fertig, soll das System eine E-Mail an die Servicekraft versenden.

          %h4 Nutzergruppen
          %p
            %ul
              %li Etwa 150 User greifen als Wartungspersonal auf ihre Wochenpläne zu. Es erfolgt ein einfacher, lesender Zugriff
              %li 1-3 Planer erstellen die Pläne 1x/Woche
              %li Bei den Servicekräften wird mit einem jährlichen Wachstum von 10-20 Personen gerechnet

          %hr
          %h2 Architekturentwurf
          %h4 Überblick
          %p
            Die geforderte Software wird als Microservice Architektur entwickelt. Um die geforderten Funktionen
            zu gewährleisten, wird die folgende Gruppe von Services entwickelt:

            %ul
              %li User-Service: Synchronisation mit der Personal-DB über AMQP, Login, Authentication
              %li Customer-Service: Synchronisation mit dem SugarCRM über AMQP
              %li Plan-UI: Web-App zum Erstellen (Plan-Service) und Lesen der Pläne (Plan-DB)
              %li Plan-Service: Teilautomatisierte Erstellung der Pläne mittels Blackboard Agenten
              %li Plan-DB: Speicherung der erstellten Pläne
              %li Email-Service: Senden von Emails an Servicekräfte
              %li External API: Zugriff für mobile Apps

          %h4 Kontextsicht
          %img{src: "images/p4-kontext.png", width: "100%"}

          %h4 Eingesetzte Technologien
          %h5 User-Service
          %p
            Der User-Service wird als NodeJS App in Javascript implementiert. Eine interne API bietet Login/Logout und Userdaten an.
            Mittels AMQP wird jede Nacht die Datenbank des User-Service mit der MySQL Personaldatenbank synchronosiert.

          %h5 Customer-Service
          %p
            Der Customer-Service wird als Phoenix App in Elixir implementiert. Der Service stellt im Wesentlichen ein Abbild
            der benötigten Daten aus dem SugarCRM zur Verfügung, die damit innerhalb der Planungssoftware gespiegelt werden.
            Mittels AMQP wird jede Nacht die Datenbank des Customer-Service mit dem SugarCRM synchronosiert.

          %h5 Plan-UI
          %p
            Die Plan-UI wird als RubyOnRails App implementiert. Als Frontend wird Twitter Bootstrap zusammen mit jQuery
            eingesetzt.

          %h5 Plan-Service
          %p
            Der Planungs-Service wird als NodeJS App in Javascript implementiert.

          %h5 Plan-DB
          %p
            Die Plan-DB wird als PostgreSQL Datenbank umgesetzt, da sich diese einfach als Master/Slave Konfiguration spiegeln lässt.
            Um die Plan-DB einfach zugreifbar zu machen, wird eine RubyOnRails App um die Datenbank herum gebaut.

          %h5 Email-Service
          %p
            Der Email-Service wird als NodeJS Service in Javascrip implementiert.

          %h5 External API
          %p
            Die External API wird als mit Yesod in Haskell implementiert. Die API bietet lediglich einen Lesezugriff auf die Plan-DB und nutzt zur Authentication den User-Service.

          %h4 Verteilungssicht
          %img{src: "images/p4-deploy.png", width: "100%"}

          %h4 Verfügbarkeit
          %p
            Um die Verfügbarkeit von 99,9% zu sichern, wird folgendes Setup vorgeschlagen
          %ul
            %li Einsatz von Docker / Docker Swarm als Deployment Plattform
            %li Betrieb von drei unabhängigen "Swarms" aus jeweils vier Servern in drei Zonen
            %li Einsatz von "Consul" als Discovery und Management Service
            %li Datenbanken als Master/Slave über alls drei Zonen gespiegelt
            %li Als Hoster wird Amazon AWS vorgeschlagen

          %h4 Sicherheit
          %p
            Nach außen ist nur die External API erreichbar. Während der Entwicklung wird ein besonderer Fokus
            in der Code Reviewws auf die Sicherheit der API gelegt. Die Plan-UI ist nur aus dem Intranet
            erreichbar.
          %p
            Alle Verbindungen zwischen den Services werden mit SSL verschlüsselt.
          %p
            Für die API wird oAuth2 aus Sicherung eingesetzt.

          %hr
          %h2 Ihre Aufgabe
          %p
            Analysieren Sie den vorgeschlagenen Entwurf in Bezug auf Vor-/Nachteile und auf die Eignung zur
            Erfüllung der funktionalen und nichtfunktionalen Anforderungen der vergangenen Aufgabenstellung.

          %p
            Erstellen Sie für den Praktikumstermin eine Präsentation in der Sie die Ergebnisse Ihrer Analyse vorstellen.
            Beantworten Sie dabei die folgenden Fragen:
          %ul
            %li Erfüllt der Entwurf alle funktionalen Anforderungen?
            %li Erfüllt der Entwurf alle nichtfunktionalen Anforderungen?
            %li Erscheint Ihnen der Entwurf angemessen komplex? Ist er zu kompliziert und vereinfacht er zu stark?
            %li Lässt sich die Software ggf. in mehreren parallelen Teams entwickeln, oder ist die Kopplung der Komponenten zu eng?
            %li Wo hat der Entwurf Vor- und Nachteile gegenüber Ihrem Entwurf aus der letzten Aufgabe?

        %p
          Die Präsentation ist bis zum Praktikumstermin per Mail an nils@loewe.io abzugeben. In der Praktikumszeit sind
          keine Änderungen mehr vorgesehen.
