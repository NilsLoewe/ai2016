---
title: Vorlesung 9 - NodeJS
layout: slide
---

%section{"data-markdown" => ""}
  \## Architektur von Informationssystemen
  \#### Hochschule für angewandte Wissenschaften
  \#### Sommersemester 2016
  Nils Löwe / [nils@loewe.io](mailto:nils@loewe.io) / @NilsLoewe

%section{"data-markdown" => ""}
  \## 3. Praktikum
  [Praktikum 3: Architekturentwurf](https://ai2016.nils-loewe.de/p03.html)
  \### Fragen?

%section{"data-markdown" => ""}
  \## 4. Praktikum
  ![](/images/p4.png)

%section{"data-markdown" => ""}
  \## Wiederholung

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \#### Chaos zu Struktur / Mud-to-structure
  \#### Verteilte Systeme
  \#### Interaktive Systeme
  \#### Adaptive Systeme

%section{"data-markdown" => ""}
  \### Chaos zu Struktur / Mud-to-structure
  \#### Layers
  \#### Pipes und Filter
  \#### Blackboard
  \#### Domain-driven Design

%section{"data-markdown" => ""}
  \### Verteilte Systeme
  \#### Serviceorientierte Architektur (SOA)
  \#### Peer-to-Peer
  \#### Client-Server

%section{"data-markdown" => ""}
  \### Interaktive Systeme
  \#### Model View Controller (MVC)
  \#### Model View Presenter
  \#### Presentation-Abstraction-Control (PAC)

%section{"data-markdown" => ""}
  \### Adaptive Systeme
  \#### Mikrokernel
  \#### Reflexion
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \#### Dokumentation von Architekturen
  \### Nutzen von Templates

  Beispiele:
  * arc42
  * Normen
  * Software Guidebook

%section{"data-markdown" => ""}
  \### ARC42
  \#### (Dr. Gernot Starke / Dr. Peter Hruschka)
  http://www.arc42.de/

  \#### *arc42 unterstützt Software- und Systemarchitekten. Es kommt aus der Praxis und basiert auf Erfahrungen internationaler Architekturprojekte und Rückmeldungen vieler Anwender.*

%section{"data-markdown" => ""}
  \### IEEE Standards - Kosten

  * IEEE 830: 171$
  * Journals: 26.500$ / Jahr
  * Standards Library: *custom quote*

%section{"data-markdown" => ""}
  \### Software Guidebook

  \#### Welche Informationen wünsche ich mir, wenn ich in ein neues Projekt komme?

  * Karten
  * Sichten
  * Geschichte
  * Praktische Informationen!

%section{"data-markdown" => ""}
  \### Software Guidebook
  \## Product vs project documentation

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \### Technologien und Frameworks

%section{"data-markdown" => ""}
  \### Frameworks
  \## Was ist ein Framework?

%section{"data-markdown" => ""}
  \### Frameworks

  \### Ein Framework ist kein fertiges Programm, es stellt einen Rahmen zur Verfügung.

%section{"data-markdown" => ""}
  \### Frameworks

  * Ein Framework ist eine semi-vollständige Applikation.
  * Es stellt für Applikationen eine wiederverwendbare, gemeinsame Struktur zur Verfügung.
  * Entwickler integrieren dass Framework in ihre eigene Applikation ein, und erweitern es um die Applikationslogik.
  * Frameworks stellen eine kohärente Struktur zur Verfügung, anstatt eine einfache Menge von Hilfsklassen anzubieten.

%section{"data-markdown" => ""}
  \### Frameworks

  * Ein Framework gibt in der Regel die Anwendungsarchitektur vor.
  * Ein Framework definiert den Kontrollfluss der Anwendung
  * Ein Framework definierte die Schnittstellen für die Applikation.

%section{"data-markdown" => ""}
  \### Frameworks

  \### Eine allgemeingültige Definition von Frameworks gibt es aufgrund der hohen Anzahl von Diversitäten nicht.

%section{"data-markdown" => ""}
  \### Frameworks

  \## Vorteile

  * Wiederverwendung von Code
  * Grundfunktionalität muss nicht immer wieder implementiert werden
  * Es existieren genormte Schnittstellen z.B. zu Datenbanken
  * Frameworks erleichtern die Programmierarbeit und sparen Entwicklungszeit
  * Frameworks können den Stil entscheidend verbessern

%section{"data-markdown" => ""}
  \### Frameworks

  \## Nachteile
  * Frameworks erhöhen die Komplexität der Anwendung
  * Frameworks stecken voller Know-How und eine effiziente Anwendung erfordert Profiwissen
  * Frameworks nehmen nicht das Verständnis der Grundlagen ab, auch wenn oft so gearbeitet wird
  * Dokumentationen sind größtenteils unzureichend

%section{"data-markdown" => ""}
  \### Frameworks
  Wie wähle ich ein Framework aus?


%section{"data-markdown" => ""}
  \###	Popularität und Community
  *Wie wahrscheinlich finde ich Hilfe und Entwickler?*

%section{"data-markdown" => ""}
  \### Philosophie
  *A tool developed by professionals for their own needs will obviously meet the demands of other professionals.*

%section{"data-markdown" => ""}
  \### Sustainability / Nachhaltigkeit
  *Kann das Framework "mitwachsen"?*

%section{"data-markdown" => ""}
  \### Support
  *Gibt es professionelle Hilfe neben der Community?*

%section{"data-markdown" => ""}
  \### Technik
  *Wie gut ist das Framework implementiert?*

%section{"data-markdown" => ""}
  \### Security
  *Wie schnell werden Sicherheitslücken reportet und geschlossen?*

%section{"data-markdown" => ""}
  \### Dokumentation
  *Wie gut, ausführlich und verständlich ist das Framework dokumentiert? Wie aktuell ist die Doku?*

%section{"data-markdown" => ""}
  \### Lizenz
  *Ein Framework unter GPL Lizenz verlangt z.B., dass die Anwendung auch unter der GPL steht. MIT dagegen nicht.*

%section{"data-markdown" => ""}
  \### Entwickler-Kapazität
  *Wie wahrscheinlich werde ich Entwickler finden?*

%section{"data-markdown" => ""}
  \### Hosting Requirements
  *Wie einfach kann ich die Anwendung deployen?*

%section{"data-markdown" => ""}
  \### Einfache Installation?
  *Wie schnell ist ein neues Projekt eingerichtet?*

%section{"data-markdown" => ""}
  \### Lernkurve
  *Wie komplex ist das Framework?*

%section{"data-markdown" => ""}
  \### Inhalte / Funktionen?

  * AJAX
  * Authentication
  * Authorization
  * Caching
  * Data Validation
  * Templating engine
  * URL mapping / rewriting
  * ...?

%section{"data-markdown" => ""}
  \### DB Abstraktion / ORM
  *Wie einfach/mächtig ist das Object Relational Mapping?*

%section{"data-markdown" => ""}
  \### JS Library
  *Welche JS Bibliothek ist per default dabei?*

%section{"data-markdown" => ""}
  \### Unit Testing
  *Wie sehr ist TDD Teil der Philosophie, wie ist der Tool-Support?*

%section{"data-markdown" => ""}
  \### Skalierbarkeit?
  *Wie einfach lässt sich die Anwendung bei Bedarf skalieren?*

%section{"data-markdown" => ""}
  \### Ausprobieren!
  *Reviews lesen reicht nicht, Erfahrungen und das look&feel zählen!*

%section{"data-markdown" => ""}
  \### Wann brauche ich ein Framework?

  * Die Anwendung basiert im Wesentlichen auf CRUD Operationen
  * Die Anwendung wird relativ groß
  * UI und Anwendungslogik sollen getrennt werden
  * Authentication und andere Grundfunkionen werden intensiv genutzt
  * Zeitdruck + Das Framework ist bereits bekannt

%section{"data-markdown" => ""}
  \### Wann brauche ich KEIN Framework?

  * Ich brauche nur einen kleinen Teil des Frameworks (z.B. ORM)
  * Zeitdruck + Das Framework ist nicht bekannt
  * "Frameworks lösen jedes Problem"

%section{"data-markdown" => ""}
  \### Fragen?


%section{"data-markdown" => ""}

  \### Ruby on Rails
  \#### Spring Boot (moovel Group GmbH)
  \####  NodeJS
  \#### AMQP
  \#### Docker (Akra GmbH)
  \#### AngularJS
  \#### Microservices (Wer liefert was GmbH)
  \#### Twitter Bootstrap

%section{"data-markdown" => ""}
  \## Ruby on Rails

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Überblick

  * Erste Version 1993
  * Verbreitet seit 2006 (durch Rails)
  * Objektorientiert
  * Interpretiert
  * Dynamisch getypt
  * "Script Sprache"

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Tradeoffs

  * Flexibilität vs. Sicherheit
  * Laufzeit-Effizienz vs. Produktivität

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Geschichte

  * 2004: Entwickelt als Basis für *Basecamp*
  * Version 1.0 (2005)
  * Version 1.1 (2006) - Scripting Engines, Performance
  * Version 1.2 (2007) - REST Support, MIME-type routing, UTF-8
  * Version 2.0 (2007) - REST als Default
  * Version 2.1 (2008) - Named Scopes, Migrationen mit Timestamp
  * Version 2.2 (2008) - Internationalisierung, Threadsicherheit
  * Version 2.3 (2009) - Template Engine
  * Version 3.0 (2010) - Modularisierung: Einzelne Teile verwendbar
  * Version 3.1 (2011) - Asset Pipeline
  * Version 4.0 (2013)
  * Version 5.0 (2016)

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Bestandteile

  * Active Support: Ruby-Erweiterungen von Rails
  * Active Record: Objektabstraktionsschicht (ORM)
  * Action Pack: Request-Behandlung und Response-Ausgabe.
  * Action View: Templates
  * Action Mailer: E-Mail-Versand und -Empfang
  * Active Resource: Routing, REST, XML-RPC

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen

  * Basiert auf Ruby
  * Model-View-Controller Architektur
  * „Don’t repeat yourself“
  * „Convention over Configuration“
  * Scaffolding
  * Datenbankmigrationen

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### „Don’t repeat yourself“

  * Jede Information sollte nur ein einziges Mal vorhanden sein
  * z.B. ActiveRecord liest das DB-Scheme direkt aus der DB
  * z.B. Rails erstellt für das Model automatisch Getter- und Setter-Methoden
  * Vorteil: Informationen werden nicht inkonsistent wenn eine Stelle verändert wird


%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### „Convention over configuration“

  * Rails erwartet sinnvolle Standardwerte
  * --> z.B. Primärschlüssel einer Tabelle ist ID vom Typ Integer
  * --> ein Modell mit dem Namen Customer liegt in der Datei \#{Rails.root}/app/models/customer.rb
  * --> Die zugehörige Tabelle heißt customers heißt

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### Scaffolding

  * Es gibt Generatoren für alle Standardfälle
  * Models, Controller, Views, Mailer, Migrationen, ...
  * Konventionen werden eingehalten
  * Web-Anwendungen lassen sich sehr schnell entwickeln
  * Wenn in der Datenbank etwa ein Feld hinzugefügt wird, erscheint es auch sofort in der entsprechenden View/New/Edit-Ansicht.
  * Scaffolding ist vor allem für Prototyping gedacht

%section{"data-markdown" => ""}
  \### Fragen?

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \### Technologien und Frameworks

%section{"data-markdown" => ""}

  \#### Ruby on Rails
  \### Spring Boot (moovel Group GmbH)
  \####  NodeJS
  \#### AMQP
  \#### Docker (Akra GmbH)
  \#### AngularJS
  \#### Microservices (Wer liefert was GmbH)
  \#### Twitter Bootstrap

%section{"data-markdown" => ""}
  \### Spring Boot (moovel Group GmbH)
  http://blog.jan-ahrens.eu/spring-boot-intro/#/

%section{"data-markdown" => ""}

  \#### Ruby on Rails
  \#### Spring Boot (moovel Group GmbH)
  \###  NodeJS
  \#### AMQP
  \#### Docker (Akra GmbH)
  \#### AngularJS
  \#### Microservices (Wer liefert was GmbH)
  \#### Twitter Bootstrap

%section{"data-markdown" => ""}
  \## Node.js

%section{"data-markdown" => ""}
  \#### Node.js

  \#### Node.js ist eine serverseitige Plattform für Netzwerk-Anwendungen, die auf der Google Chrome JavaScript Engine (V8 Engine) basiert.

  * easily build fast and scalable network applications
  * event-driven, non-blocking I/O model
  * lightweight, efficient, perfect for data-intensive real-time applications
  * large JavaScript Library

%section{"data-markdown" => ""}
  \#### Node.js

  \### Node.js = Runtime Environment + JavaScript Library

  https://github.com/nodejs/node

%section{"data-markdown" => ""}
  \#### Node.js
  \### Releases

  * Current: Released from active development branches of this repository
  * LTS: Releases that receive Long-term Support, with a focus on stability and security
  * Nightly: Versions of code in this repository on the current Current branch

%section{"data-markdown" => ""}
  \#### Node.js
  \### LTS Releases

  * Every second Current release line (major version) will become an LTS line
  * 18 months of Active LTS support
  * Additional 12 months of Maintenance
  * LTS releases are less frequent and will attempt to maintain consistent major and minor version numbers
  * There are no breaking changes or feature additions, except in some special circumstances

%section{"data-markdown" => ""}
  \#### Node.js
  \### Releases

  * 06/2009: Version 0.0.3
  * 59 unstable Releases
  * 2013: Version 0.10.x
  * 2015: Version 0.12.x
  * 2015: Version 1.0.x
  * 2015: Version 2.0.x
  * 2015: Version 3.0.x
  * 2015: Version 4.0.x (LTS)
  * 2015: Version 5.0.x
  * 2016: Version 6.0.x (LTS)

%section{"data-markdown" => ""}
  ![](/images/node_schedule.png)

%section{"data-markdown" => ""}
  \#### Node.js
  \### Chrome V8
  \####Google's high performance, open source, JavaScript engine.

  * Open source, high-performance JavaScript engine
  * Written in C++
  * Used in Google Chrome
  * It implements ECMAScript as specified in ECMA-262, 3rd edition
  * Runs on Windows XP or later, Mac OS X 10.5+, and Linux systems that use IA-32, ARM or MIPS processors
  * V8 can run standalone, or can be embedded into any C++ application


%section{"data-markdown" => ""}
  \#### Node.js
  \### Features of Node.js

  * Asynchronous and Event Driven
  * Very Fast, being built on Google Chrome's V8 JavaScript Engine
  * Single Threaded but Highly Scalable: Single threaded model with event looping
  * No Buffering: Node.js applications never buffer any data
  * Node.js is released under the MIT license.

%section{"data-markdown" => ""}
  \#### Node.js
  \###  Who Uses Node.js?

  * eBay
  * General Electric
  * GoDaddy
  * Microsoft
  * PayPal
  * Uber
  * Wikipins
  * Yahoo!
  * ...

%section{"data-markdown" => ""}
  \#### Node.js
  \###  Anwendungsfälle

  * I/O bound Applications
  * Data Streaming Applications
  * Data Intensive Real time Applications (DIRT)
  * JSON APIs based Applications
  * Single Page Applications

%section{"data-markdown" => ""}
  \#### Node.js
  \###  Grenzen

  * CPU intensive applications

%section{"data-markdown" => ""}
  \#### Node.js
  \###  Installation

  * Install the Distro-Stable Version (linux, MacOS)
  * Install Using NVM (linux, MacOS)
  * Install from source/tar (linux, MacOS, Windows, FreeBSD, OpenBSD, AIX, ARM, ...)

%section{"data-markdown" => ""}
  \#### Node.js
  \###  REPL: Read Eval Print Loop

  * Read - Reads user's input, parse the input into JavaScript data-structure and stores in memory.
  * Eval - Takes and evaluates the data structure
  * Print - Prints the result
  * Loop - Loops the above command until user press ctrl-c twice.

%section
  %h4 Node.js
  %h3 REPL: Read Eval Print Loop
  %ul
    %li REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.
    %li REPL can be started by simply running node on shell/console without any argument as follows.
  %pre
    %code
      :preserve
        $ node
        >

%section{"data-markdown" => ""}
  \#### Node.js: NPM
  \###  Node Package Manager

  * https://www.npmjs.com/
  * Find, share, and reuse packages of code from hundreds of thousands of developers
  * 3 million developers and thousands of companies use npm

%section{"data-markdown" => ""}
  \#### Node.js: NPM
  \###  Statistiken (Stand 13.05.2016)

  * 283,432 total packages
  * 57,724,266 downloads in the last day
  * 1,040,776,238 downloads in the last week
  * 4,169,158,104 downloads in the last month

%section{"data-markdown" => ""}
  \#### Node.js: NPM
  \###  Geschäftsmodell

  * Open Source: FREE
  * Private Account:  $7 per user / month
  * Orgs: $16 per user / month
  * Enterprise: $2000 per year
  * npm Enterprise Pro

%section{"data-markdown" => ""}
  \#### Node.js
  \###  Concepts

  ![](/images/nodejs_concepts.jpg)


%section{"data-markdown" => ""}
  \#### Node.js
  \### package.json

  * Manage locally installed npm packages
  * Document project dependencies
  * Specify the versions used packages
  * Make a build reproducable

%section
  %h4 Node.js
  %h3 package.json: Minimum

  %ul
    %li "name"
    %li "version"

  %pre
    %code
      :preserve
        {
          "name": "my-cool-package",
          "version": "1.0.0"
        }

%section{"data-markdown" => ""}
  \#### Node.js
  \### package.json: Attribute

  * name
  * version
  * description
  * homepage
  * author
  * contributors
  * dependencies - *npm automatically installs all the dependencies mentioned here in the node_module folder*
  * repository - *repository type and url of the package*
  * main - *entry point of the package*
  * keywords


%section
  %h4 Node.js
  %h3 Create a module

  %pre
    %code
      :preserve
        $ npm init
        This utility will walk you through creating a package.json file.
        It only covers the most common items, and tries to guess sane defaults.

        See 'npm help json' for definitive documentation on these fields
        and exactly what they do.

        Use 'npm install <pkg> --save' afterwards to install a package and
        save it as a dependency in the package.json file.

        Press ^C at any time to quit.
        name: (webmaster)
        ...

        $ npm adduser
        Username: abcdefg
        Password:
        Email: (this IS public) abcdefg@gmail.com

        $ npm publish


%section{"data-markdown" => ""}
  \#### Node.js
  \### Callbacks

  * Asynchronous equivalent for a function
  * A callback function is called at the completion of a given task
  * All APIs of Node are written is such a way that they supports callbacks.

%section
  %h4 Node.js
  %h3 Callbacks: Blocking Example
  main.js
  %pre
    %code
      :preserve
        var fs = require("fs");

        var data = fs.readFileSync('input.txt');

        console.log(data.toString());
        console.log("Program Ended");

  input.txt
  %pre
    %code
      :preserve
        This is the input.txt file

  %pre
    %code
      :preserve
        $ node main.js
        This is the input.txt file
        Program Ended

%section
  %h4 Node.js
  %h3 Callbacks: Non-Blocking Example

  main.js
  %pre
    %code
      :preserve
        var fs = require("fs");

        fs.readFile('input.txt', function (err, data) {
        if (err) return console.error(err);
        console.log(data.toString());
        });

        console.log("Program Ended");

  input.txt
  %pre
    %code
      :preserve
        This is the input.txt file

  %pre
    %code
      :preserve
        $ node main.js
        Program Ended
        This is the input.txt file

%section{"data-markdown" => ""}
  \#### Node.js
  \### Concurrency

  * Node js is a single threaded application
  * Concurrency is implemented via events and callbacks
  * As every API of Node js is asynchronous and single threaded
  * Async function calls maintain the concurrency.
  * Node uses the observer pattern for events

%section{"data-markdown" => ""}
  \#### Node.js
  \### Event Driven Programming

  \#### In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.

%section{"data-markdown" => ""}
  \#### Node.js
  \### Event Driven Programming
  ![](/images/event_loop.jpg)

%section{"data-markdown" => ""}
  \#### Node.js
  \### Event Driven Programming
  * The functions which listens to events act as Observers
  * When an event gets fired, its listener functions start executing
  * Node.js has multiple in-built events available through the **events module** and **EventEmitter class**

%section
  %h4 Node.js
  %h3 Event Loop

  %pre
    %code
      :preserve
        // Import events module
        var events = require('events');

        // Create an eventEmitter object
        var eventEmitter = new events.EventEmitter();

        // Bind event and even handler as follows
        eventEmitter.on('eventName', eventHandler);

        // Fire an event
        eventEmitter.emit('eventName');


%section
  %h4 Node.js
  %h3 Event Loop
  All objects which emit events are instances of events.EventEmitter.
  %pre
    %code
      :preserve
        // Import events module
        var events = require('events');
        // Create an eventEmitter object
        var eventEmitter = new events.EventEmitter();
  %ul
    %li When an instance faces any error, it emits an 'error' event.
    %li When new listener is added, 'newListener' event is fired
    %li When a listener is removed, 'removeListener' event is fired.

%section{"data-markdown" => ""}
  \#### Node.js
  \### Streams

  \#### Streams are objects that let you read data from a source or write data to a destination in continous fashion.

%section{"data-markdown" => ""}
  \#### Node.js
  \### Streams

  \#### In Node.js, there are four types of streams.

  * Readable  - used for read operation.
  * Writable  - used for write operation.
  * Duplex    - can be used for both read and write operation.
  * Transform - A type of duplex stream where the output is computed based on input.

%section{"data-markdown" => ""}
  \#### Node.js
  \### Streams

  \### Each type of Stream is an EventEmitter instance and throws several events

  * data - fired when there is data is available to read.
  * end  - fired when there is no more data to read.
  * error - fired when there is any error receiving or writing data.
  * finish - fired when all data has been flushed to underlying system

%section{"data-markdown" => ""}
  \#### Node.js
  \### File System

  * Node implements File I/O using simple wrappers around standard POSIX functions
  * Every method in fs module have synchronous as well as asynchronous form
  * Asynchronous methods take a parameter as "completion function callback"
  * It is preferred to use asynchronous methods instead of synchronous methods

%section{"data-markdown" => ""}
  \#### Node.js
  \### Standard Modules

  * OS Module: Provides basic operating-system related utility functions.
  * Path Module: Utilities for handling and transforming file paths.
  * Net Module: Servers and clients as streams
  * DNS Module: DNS lookup, operating system name resolution functionalities
  * Domain Module: I/O operations as a single group.
  * http module: Create either HTTP client of server

%section{"data-markdown" => ""}
  \#### Node.js
  \### Express

  * Minimal and flexible Node.js web application framework
  * Robust set of features to develop web and mobile applications
  * Allows to set up middlewares to respond to HTTP Requests
  * Defines a routing table for actions based on HTTP Method and URL
  * Allows to dynamically render HTML Pages based on passing arguments to templates

%section{"data-markdown" => ""}
  \#### Node.js
  \### JXcore

  * Compile and distribute it a Node.js app
  * Open source project
  * Packaging and encryption of source files and other assets

%section{"data-markdown" => ""}
  \#### Node.js
  \### Beispiel

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}

  \#### Vorbereitung auf Klausuraufgaben

  * In welcher Beziehung stehen Architektur und Design?
  * Was besagt 'Conways Law'?
  * Nennen und erläutern Sie drei Arten von Architekturmustern
  * Was sind zwei Grundprinzipien, die hinter Ruby on Rails stecken?
  * Nennen sie drei Nachteile für die Verwendung von Frameworks!
  * Wann ist die Verwendung eines Frameworks nicht sinnvoll?
  * Nennen sie drei Auswahlkriterien für Frameworks!
  * Für welche Systeme wird das MVC Architekturmuster typischerweise verwendet?
  * Wie ist das ARC42 Template entstanden?

%section{"data-markdown" => ""}
  \## Fragen?

  \##### Unterlagen: [ai2016.nils-loewe.de](https://ai2016.nils-loewe.de)
