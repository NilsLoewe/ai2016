---
title: Vorlesung 7 - Architekturmuster
layout: slide
---

%section
  TBD

%section{"data-markdown" => ""}
  \## Architektur von Informationssystemen
  \#### Hochschule fÃ¼r angewandte Wissenschaften
  \#### Sommersemester 2016
  Nils LÃ¶we / [nils@loewe.io](mailto:nils@loewe.io) / @NilsLoewe

%section{"data-markdown" => ""}
  \#### Chaos zu Struktur / Mud-to-structure
  \#### Verteilte Systeme
  \### Interaktive Systeme
  \#### Adaptive Systeme
  \#### Domain-spezifische Architektur

%section{"data-markdown" => ""}
  \##### Interaktive Systeme
  \### Model View Controller (MVC)
  \#### Model View Presenter
  \#### Presentation-Abstraction-Control (PAC)

%section{"data-markdown" => ""}
  \#### Model View Controller (MVC)

  Das MVC-Pattern ist eine spezielle Variante des Layers-Pattern, die sich aus den
  drei Schichten Datenhaltung (Model), Programmlogik (Controller) und PrÃ¤senta-
  tion (View) zusammensetzt. Das Model ist dabei fÃ¼r die Speicherung der Daten
  zustÃ¤ndig und stellt Zugrismethoden fÃ¼r diese bereit, der/die View(s) Ã¼bernimmt
  die Darstellung der Daten und der Controller regelt, welcher View aufgerufen wird
  und wie Datenmanipulationen am Model vorgenommen werden.

%section{"data-markdown" => ""}
  \##### Interaktive Systeme
  \#### Model View Controller (MVC)
  \### Model View Presenter
  \#### Presentation-Abstraction-Control (PAC)

%section{"data-markdown" => ""}
  \#### Model View Presenter

%section{"data-markdown" => ""}
  \##### Interaktive Systeme
  \#### Model View Controller (MVC)
  \#### Model View Presenter
  \### Presentation-Abstraction-Control (PAC)

%section{"data-markdown" => ""}
  \#### Presentation-Abstraction-Control (PAC)

%section{"data-markdown" => ""}
  \#### Chaos zu Struktur / Mud-to-structure
  \#### Verteilte Systeme
  \#### Interaktive Systeme
  \### Adaptive Systeme
  \#### Domain-spezifische Architektur

%section{"data-markdown" => ""}
  \##### Adaptive Systeme
  \### Mikrokernel
  \#### Reflexion
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \#### Mikrokernel

  Software Systeme, die wechselnden Systemanorderungen genÃ¼gen mÃ¼ssen, benutzen
  das Microkernel Muster. Der Mikrokern stellt hierbei die Basis fÃ¼r mÃ¶gliche
  Erweiterungen dar und koordiniert gleichzeitig ihre Zusammenarbeit. Eine solche
  Architektur soll es verschiedenen Anwendungen ermÃ¶glichen auf einer Maschine und
  dessen funktionalen Kern zu laufen, obwohl die zugrunde liegenden Betriebssysteme
  unterschiedlich sind. In diesem Kontext sind mehrere Probleme zu lÃ¶sen. Damit nicht
  nur die heutige Technik integriert werden kann, muss das System auch zukÃ¼nftigen
  Hard- und Software- Entwicklungen standhalten kÃ¶nnen und sich dementsprechend
  erweitern und anpassen lassen, um verschiedene Anwendungsplattformen emulieren zu
  kÃ¶nnen.

%section{"data-markdown" => ""}
  \##### Adaptive Systeme
  \#### Mikrokernel
  \### Reflexion
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \#### Reflexion

  Systeme verfÃ¼gen Ã¼ber spezifische Eigenschaften, die sich in ihrem Verhalten und ihrer Struktur wiederspiegeln. Das Reflection Muster benutzt fÃ¼r die Beschreibung der
  aktuellen Eigenschaften eine Metaebene. Die Anwendungslogik befindet sich auf der so genannten Basisebene und Ã¤ndert sich
  abhÃ¤ngig von den beschriebenen Systemeigenschaften auf der Metaebene. Den Kontext bei Reflection bilden Systeme, die sich ihrer selbst bewusst sind (Metaebene) und eine Anpassbarkeit dadurch und im Allgemeinen unterstÃ¼tzen

%section{"data-markdown" => ""}
  \##### Adaptive Systeme
  \#### Mikrokernel
  \#### Reflexion
  \### Dependency Injection

%section{"data-markdown" => ""}
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \### Fragen?

%section{"data-markdown" => ""}
  \#### Chaos zu Struktur / Mud-to-structure
  \#### Verteilte Systeme
  \#### Interaktive Systeme
  \#### Adaptive Systeme
  \### Domain-spezifische Architektur

%section{"data-markdown" => ""}
  \### Domain-spezifische Architektur

  * Telekommunikation
  * Avionik
  * Automotive

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### QualiÃ¤t und andere nichtfunktionale Anforderungen
  \### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \## Fragen?

  \##### Unterlagen: [ai2016.nils-loewe.de](https://ai2016.nils-loewe.de)
