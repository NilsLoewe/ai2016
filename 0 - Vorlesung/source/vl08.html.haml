---
title: Vorlesung 8 - Dokumentation
layout: slide
---

%section{"data-markdown" => ""}
  \## Architektur von Informationssystemen
  \#### Hochschule für angewandte Wissenschaften
  \#### Sommersemester 2016
  Nils Löwe / [nils@loewe.io](mailto:nils@loewe.io) / @NilsLoewe

%section{"data-markdown" => ""}
  \## 3. Praktikum
  [Praktikum 3: Architekturentwurf](https://ai2016.nils-loewe.de/p03.html)
  \### Fragen?

%section{"data-markdown" => ""}
  \## 4. Praktikum
  Frage: Alle Präsentationen in der 12. Vorlesungswoche?

%section{"data-markdown" => ""}
  \## Wiederholung

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \##### Adaptive Systeme
  \### Mikrokernel
  \#### Reflexion
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \#### Mikrokernel

  \### Ziel: Änderung von Systemanforderungen zur Laufzeit dynamisch begegnen.

%section{"data-markdown" => ""}
  \#### Mikrokernel

  \### Aufgaben
  * Der Mikrokernel bietet die Basis für mögliche Erweiterungen
  * Der Microkernel koordiniert die Zusammenarbeit.

%section{"data-markdown" => ""}
  \#### Microkernel
  \### Herausforderung

  ![](/images/microkernel.png)

%section{"data-markdown" => ""}
  \#### Mikrokernel
  \### Beispiele: Microkernel

  * Minix Kernel
  * GNU Mach
  * AmigaOS
  * SymbianOS

%section{"data-markdown" => ""}
  \#### Mikrokernel
  \### Beispiele: Monolithische Kernels

  * Linux
  * Android
  * Windows bis Win98 (DOS Kernel)

%section{"data-markdown" => ""}
  \#### Mikrokernel
  \### Beispiele: Hybrid-Kernels

  * MacOS X (Darwin)
  * Windows NT (oft als Microkernel bezeichnet)


%section{"data-markdown" => ""}
  \#### Mikrokernel
  \### Vorteile

  * Separierte Komponenten: Austauschbarkeit
  * Treiber im Benutzer-Modus: Sicherheit
  * kleine Trusted Computing Base
  * Skalierbarkeit
  * Zuverlässigkeit
  * Transparenz

%section{"data-markdown" => ""}
  \#### Mikrokernel
  \### Nachteile

  * Leistung
  * Komplexität

%section{"data-markdown" => ""}
  \### Domain Driven Design
  \## Ein Beispiel

%section{"data-markdown" => ""}
  \#### DDD - Ein Beispiel

  \### Eine Firma bietet Softwareentwicklung als Dienstleistung an.

  \###### http://blog.mirkosertic.de/architecturedesign/dddexample

  * Aufwand wird nach Stunden verrechnet
  * Es gibt festangestellte Softwareentwickler
  * Es gibt einen Pool von Freelancern.
  * Bisher wird die Zuordnung von Entwicklern zu Projekten in einem Excel-Sheet organisiert


%section{"data-markdown" => ""}
  \#### DDD - Ein Beispiel

  \### Probleme mit dem Excel-Ansatz

  * Excel skaliert nicht auf mehrere Anwender
  * Keine Sicherheit
  * Kein Logging

%section{"data-markdown" => ""}
  \#### DDD - Ein Beispiel
  \### Lösung: Neue Software bauen

  * Durchsuchbarer Katalog von Freelancern
  * Mehrere Kontaktmöglichkeiten pro Freelancer
  * Durchsuchbarer Katalog von Projekten
  * Durchsuchbarer Katalog von Projekten
  * Timesheets für jeden Freelancer (pro Projekt)

%section{"data-markdown" => ""}
  \#### DDD - Ein Beispiel

  ![](/images/dddfirstrun.png)

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz
  \### Probleme?

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz: Probleme
  \### Großer Objektgraph: Performance Probleme unter Last
  Framework wie Hibernate wäre notwendig um das zu vermeiden

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz: Probleme
  \### Warum die bidirektionale Verknüpfung zwischen User und Rolle?

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz: Probleme
  \### Boolean-Flags um den Kontakttypen zu unterscheiden

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz: Probleme
  \### Projekt-Liste in der Freelancer-Klasse:
  \#### Freelancer verändern um Projekte zuzufügen
  Potentielle Transaktionsprobleme unter Last (mehrere Leute legen gleichzeitig Projekte für den gleichen Kunden an)

%section{"data-markdown" => ""}
  \#### Straight forward Ansatz: Probleme
  * Kontaktinformation == Kommunikationskanal?
  * Das Diagramm ist eher ein Entiy-Relationship-Diagram als ein Software Modell
  * Wo ist die Businesslogik?

%section{"data-markdown" => ""}
  \#### DDD nutzen
  \#### Anforderungen: "Body Leasing Domain"
  \### **Context-Map: Komplexität reduzieren durch Subdomains**

  * Identität und Access Management Subdomain
  * Freelancer Management Subdomain
  * Kundenmanagement Subdomain
  * Projektmanagement Subdomain

%section{"data-markdown" => ""}
  \#### DDD - Context Map
  ![](/images/dddcontextmap.png)

%section{"data-markdown" => ""}
  \#### DDD - Bounded Context

  * Zuordnen von Subdomains zu Teilen der Lösung
  * *Building blocks* nutzen (Design Pattern anwenden)
  * Die DDD Architekturpattern sind nicht technologieabhängig!

%section{"data-markdown" => ""}
  \#### DDD - Ein erster Ansatz

  * Jeder Bounded Context enthält Aggregates und Wertobjekte
  * Aggregates sind Objekthierarchien
  * Nur das Root-Objekt eines Aggregates ist von außen zugreifbar
  * Jeder Zugriff auf ein Objekt passiert durch die Aggregates: Bessere Kapselung
  * Aggregates und Entites besitzen eine ID
  * Wertobjekte haben keine ID und können ihren Zustand nicht ändern
  * Jede Zustandsänderung erzeugt ein neues Wertobjekt: Vermeiden von Seiteneffekten

%section{"data-markdown" => ""}
  \#### Vollständiger UseCase mit Persistenz

  * Persistenz in DDD wird mit "Repositories" umgesetet
  * Ein Repository ist durchsuchbar, kann Instanzen liefern und löschen, sowie neue Instanzen ablegen
  * Es sollte ein Repository für jedes Aggregate geben

%section{"data-markdown" => ""}
  \#### Vollständiger UseCase mit Persistenz

  * Ein Client ist ein abstraktes Konzept
  * Ein Client kann alles von einem Frontend über einen SOAP Webservice zu einer REST Ressource sein
  * Ein Client sendet Befehle an den ApplciationService

%section{"data-markdown" => ""}
  \#### Vollständiger UseCase mit Persistenz

  * Der ApplicationService setzt die Befehle in UseCases um
  * Der FreelancerApplicationService lädt dasFreelancer Aggregate aus dem FreelancerRepository und ruft moveTo() auf dem FreelancerAggregate auf
  * Der FreelancerApplicationService bildet dabei die Transactionsgrenzen.
  * Jeder Aufruf erzeugt eine neue Transaktion

%section{"data-markdown" => ""}
  \#### DDD - Applikations-Architektur

  * Jeder Bounded Context sollte eine "Deployment Unit" bilden, z.B. ein Java WAR file oder ein EJB JAR
  * Die Bounded Contexts sind unabhängig designt, sie sollten daher auch unabhängig implementiert werden

%section{"data-markdown" => ""}
  \#### DDD - Layers

  ![](/images/dddlayer1.png)

%section{"data-markdown" => ""}
  \#### DDD - Layers

  ![](/images/dddlayer2.png)

%section{"data-markdown" => ""}
  \#### DDD - Vorteile

  * Der Domain Layer basiert nicht auf anderen Teilen der Architektur
  * Die Repository Implementierung kann getauscht werden, ohne die Businesslogik zu beeinflussen

%section{"data-markdown" => ""}
  \#### DDD -  Domain Layer

  * Enthält die Businesslogik, keine Abhängigkeiten der Infrastruktur
  * Die Modelle sollten nach dem CQS(Command-Query-Separation) Prinzip entworfen werden
  * --> Query Methoden geben lediglich Daten zurück ohne Zustände zu ändern
  * --> Command Methoden ändern den State

%section{"data-markdown" => ""}
  \#### DDD - Application Layer

  * Der Application Layer nimmt Kommandos des User Interface Layer an
  * Der Application Layer ruft UseCase Implementierungen im Domain layer auf
  * Der Application Layer biete Transactioskontrolle für Business Operationen

%section{"data-markdown" => ""}
  \#### DDD - Infrastructure Layer

  Der Infrastructure Layer bietet Infrastrukturabhängige Teile für alle anderen Layer


%section{"data-markdown" => ""}
  \#### DDD - User Interface Layer

  * Der User Interface Layer konsumiert Application Services und ruft Funktionalität der Businesslogik auf diesen Services auf.
  * Jeder Aufruf ist eine neue Transaktion
  * Der User Interface Layer kann beliebig implementiert sein, z.B. ein SOAP webservice, eine REST Resource oder eine Swing/AWT GUI

%section{"data-markdown" => ""}
  \#### DDD - Zusammenfassung

  \### Domain-driven Design is object oriented programming done right. *(Eric Evans)*

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}
  \### Rückblick auf Architekturmuster

%section{"data-markdown" => ""}
  \#### Chaos zu Struktur / Mud-to-structure
  \#### Verteilte Systeme
  \#### Interaktive Systeme
  \#### Adaptive Systeme
  \#### Domain-spezifische Architektur

%section
  %h3 Chaos zu Struktur / Mud-to-structure
  %ul
    %li Organisation der Komponenten und Objekte eines Softwaresystems
    %li Die Funktionalität des Gesamtsystems wird in kooperierende Subsysteme aufgeteilt
    %li Zu Beginn des Softwareentwurfs werden Anforderungen analysiert und spezifiziert
    %li Integrierbarkeit, Wartbarkeit, Änderbarkeit, Portierbarkeit und Skalierbarkeit sollen berücksichtigt werden

%section{"data-markdown" => ""}
  \### Chaos zu Struktur / Mud-to-structure
  \#### Layers
  \#### Pipes und Filter
  \#### Blackboard
  \#### Domain-driven Design

%section
  %h3 Verteilte Systeme
  %ul
    %li Verteilung von Ressourcen und Dienste in Netzwerken
    %li Kein "zentrales System" mehr
    %li Basiert auf guter Infrastruktur lokaler Datennetze

%section{"data-markdown" => ""}
  \### Verteilte Systeme
  \#### Serviceorientierte Architektur (SOA)
  \#### Peer-to-Peer
  \#### Client-Server

%section
  %h3 Interaktive Systeme
  %ul
    %li Strukturierung von Mensch-Computer-Interaktionen
    %li Möglichst gute Schnittstellen für die Benutzer schaffen
    %li Der eigentliche Systemkern bleibt von der Benutzerschnittstelle unangetastet.

%section{"data-markdown" => ""}
  \### Interaktive Systeme
  \#### Model View Controller (MVC)
  \#### Model View Presenter
  \#### Presentation-Abstraction-Control (PAC)

%section
  %h3 Adaptive Systeme
  %ul
    %li Unterstützung der Erweiterungs- und Anpassungsfähigkeit von Softwaresystemen.
    %li Das System sollte von vornherein mögliche Erweiterungen unterstützen
    %li Die Kernfunktionalität sollte davon unberührt bleiben kann.

%section{"data-markdown" => ""}
  \### Adaptive Systeme
  \#### Mikrokernel
  \#### Reflexion
  \#### Dependency Injection

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \#### Dokumentation von Architekturen
  \### Nutzen von Templates

  Beispiele:
  * arc42
  * Normen
  * Software Guidebook

%section{"data-markdown" => ""}
  \### ARC42
  \#### (Dr. Gernot Starke / Dr. Peter Hruschka)
  http://www.arc42.de/

  \#### *arc42 unterstützt Software- und Systemarchitekten. Es kommt aus der Praxis und basiert auf Erfahrungen internationaler Architekturprojekte und Rückmeldungen vieler Anwender.*

%section{"data-markdown" => ""}
  \#### Dokumentation von Architekturen
  \### ARC42

  1. Einführung und Ziele
  2. Randbedingungen
  3. Kontextabgrenzung
  4. Lösungsstrategie
  5. Bausteinsicht
  6. Laufzeitsicht
  7. Verteilungssicht
  8. Querschnittliche Konzepte/Muster
  9. Entwurfsentscheidungen
  10. Qualitätsszenarien
  11. Risiken
  12. Glossar

%section{"data-markdown" => ""}
  \#### ARC42
  ![](/images/arc42.png)

%section{"data-markdown" => ""}
  \### IEEE Standards

  **IEEE Standards** documents are developed within the IEEE Societies and the Standards Coordinating Committees of
  the IEEE Standards Association (IEEE-SA) Standards Board. The IEEE develops its standards through a consensus
  development process, approved by the American National Standards Institute, which brings together volunteers representing
  varied viewpoints and interests to achieve the final product. Volunteers are not necessarily members of the
  Institute and serve without compensation. While the IEEE administers the process and establishes rules to promote
  fairness in the consensus development process, the IEEE does not independently evaluate, test, or verify the accuracy
  of any of the information contained in its standards or implementations thereof.

%section{"data-markdown" => ""}
  \### IEEE Standards

  * IEEE 802:    LAN
  * IEEE 802.3:  Carrier sense multiple access with collision detection (CSMA/CD)
  * IEEE 802.11: Wireless LAN
  * IEEE 830:    Recommended Practice for Software Requirements Specifications
  * IEEE 1394:   FireWire/i.Link Bussysteme
  * IEEE 1471:   Recommended Practice for Architectural Description of Software-Intensive Systems
  * IEEE 9945:   Portable Operating System Interface (POSIX®)

%section{"data-markdown" => ""}
  \### IEEE Standards - Kosten

  * IEEE 830: 171$
  * Journals: 26.500$ / Jahr
  * Standards Library: *custom quote*

%section{"data-markdown" => ""}
  \### Software Guidebook

  * Template von Simon Brown aus dem Buch *"Software Architecture for Developers"*
  * Buch: https://leanpub.com/software-architecture-for-developers
  * Beispiel: https://leanpub.com/techtribesje (kostenlos)

%section{"data-markdown" => ""}
  \### Software Guidebook

  \#### Welche Informationen wünsche ich mir, wenn ich in ein neues Projekt komme?

  * Karten
  * Sichten
  * Geschichte
  * Praktische Informationen!

%section{"data-markdown" => ""}
  \### Software Guidebook
  \## Product vs project documentation

%section{"data-markdown" => ""}
  \### Software Guidebook
  1.  Context
  2. Functional Overview
  3. Quality Attributes
  4. Constraints
  5. Principles
  6. Software Architecture
  7. External Interfaces
  8. Code
  9. Data
  10. Infrastructure Architecture
  11. Deployment
  12. Operation and Support
  13. Development Environment

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}

  \#### Vorbereitung auf Klausuraufgaben

  * Was waren die Gründe für Softwarearchitektur?
  * Was sollte eine Kontext-Sicht enthalten?
  * In welcher Beziehung stehen Architektur und Design?
  * Was besagt 'Conways Law'?
  * Nennen und erläutern Sie drei Arten von Architekturmustern
  * Für welche Systeme wird das MVC Muster typischerweise verwendet?

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \### Software Guidebook: Ein Beispiel

  * Beispiel: https://leanpub.com/techtribesje
  * Website: https://techtribes.je

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \### Technologien und Frameworks

%section{"data-markdown" => ""}
  \### Frameworks
  \## Was ist ein Framework?

%section{"data-markdown" => ""}
  \## Frameworks

  \### Ein Framework ist kein fertiges Programm, es stellt einen Rahmen zur Verfügung.

%section{"data-markdown" => ""}
  \## Frameworks

  * Ein Framework ist eine semi-vollständige Applikation.
  * Es stellt für Applikationen eine wiederverwendbare, gemeinsame Struktur zur Verfügung.
  * Entwickler integrieren dass Framework in ihre eigene Applikation ein, und erweitern es um die Applikationslogik.
  * Frameworks stellen eine kohärente Struktur zur Verfügung, anstatt eine einfache Menge von Hilfsklassen anzubieten.

%section{"data-markdown" => ""}
  \## Frameworks

  * Ein Framework gibt in der Regel die Anwendungsarchitektur vor.
  * Ein Framework definiert den Kontrollfluss der Anwendung
  * Ein Framework definierte die Schnittstellen für die Applikation.

%section{"data-markdown" => ""}
  \## Frameworks

  \### Eine allgemeingültige Definition von Frameworks gibt es aufgrund der hohen Anzahl von Diversitäten nicht.

%section{"data-markdown" => ""}
  \### Frameworks

  \## Vorteile

  * Wiederverwendung von Code
  * Grundfunktionalität muss nicht immer wieder implementiert werden
  * Es existieren genormte Schnittstellen z.B. zu Datenbanken
  * Frameworks erleichtern die Programmierarbeit und sparen Entwicklungszeit
  * Frameworks können den Stil entscheidend verbessern

%section{"data-markdown" => ""}
  \### Frameworks

  \## Nachteile
  * Frameworks erhöhen die Komplexität der Anwendung
  * Frameworks stecken voller Know-How und eine effiziente Anwendung erfordert Profiwissen
  * Frameworks nehmen nicht das Verständnis der Grundlagen ab, auch wenn oft so gearbeitet wird
  * Dokumentationen sind größtenteils unzureichend



%section{"data-markdown" => ""}
  \## Frameworks
  Wie wähle ich ein Framework aus?


%section{"data-markdown" => ""}
  \###	Popularität und Community
  *Wie wahrscheinlich finde ich Hilfe und Entwickler?*

%section{"data-markdown" => ""}
  \### Philosophie
  *A tool developed by professionals for their own needs will obviously meet the demands of other professionals.*

%section{"data-markdown" => ""}
  \### Sustainability / Nachhaltigkeit
  *Kann das Framework "mitwachsen"?*

%section{"data-markdown" => ""}
  \### Support
  *Gibt es professionelle Hilfe neben der Community?*

%section{"data-markdown" => ""}
  \### Technik
  *Wie gut ist das Framework implementiert?*

%section{"data-markdown" => ""}
  \### Security
  *Wie schnell werden Sicherheitslücken reportet und geschlossen?*

%section{"data-markdown" => ""}
  \### Dokumentation
  *Wie gut, ausführlich und verständlich ist das Framework dokumentiert? Wie aktuell ist die Doku?*

%section{"data-markdown" => ""}
  \### Lizenz
  *Ein Framework unter GPL Lizenz verlangt z.B., dass die Anwendung auch unter der GPL steht. MIT dagegen nicht.*

%section{"data-markdown" => ""}
  \### Entwickler-Kapazität
  *Wie wahrscheinlich werde ich Entwickler finden?*

%section{"data-markdown" => ""}
  \### Hosting Requirements
  *Wie einfach kann ich die Anwendung deployen?*

%section{"data-markdown" => ""}
  \### Einfache Installation?
  *Wie schnell ist ein neues Projekt eingerichtet?*

%section{"data-markdown" => ""}
  \### Lernkurve
  *Wie komplex ist das Framework?*

%section{"data-markdown" => ""}
  \### Inhalte / Funktionen?

  * AJAX
  * Authentication
  * Authorization
  * Caching
  * Data Validation
  * Templating engine
  * URL mapping / rewriting
  * ...?

%section{"data-markdown" => ""}
  \### DB Abstraktion / ORM
  *Wie einfach/mächtig ist das Object Relational Mapping?*

%section{"data-markdown" => ""}
  \### JS Library
  *Welche JS Bibliothek ist per default dabei?*

%section{"data-markdown" => ""}
  \### Unit Testing
  *Wie sehr ist TDD Teil der Philosophie, wie ist der Tool-Support?*

%section{"data-markdown" => ""}
  \### Skalierbarkeit?
  *Wie einfach lässt sich die Anwendung bei Bedarf skalieren?*

%section{"data-markdown" => ""}
  \### Ausprobieren!
  *Reviews lesen reicht nicht, Erfahrungen und das look&feel zählen!*

%section{"data-markdown" => ""}
  \### Wann brauche ich ein Framework?

  * Die Anwendung basiert im Wesentlichen auf CRUD Operationen
  * Die Anwendung wird relativ groß
  * UI und Anwendungslogik sollen getrennt werden
  * Authentication und andere Grundfunkionen werden intensiv genutzt
  * Zeitdruck + Das Framework ist bereits bekannt

%section{"data-markdown" => ""}
  \### Wann brauche ich KEIN Framework?

  * Ich brauche nur einen kleinen Teil des Frameworks (z.B. ORM)
  * Zeitdruck + Das Framework ist nicht bekannt
  * "Frameworks lösen jedes Problem"

%section{"data-markdown" => ""}
  \### Überblick über aktuelle Frameworks
  https://en.wikipedia.org/wiki/Comparison_of_web_frameworks

%section{"data-markdown" => ""}
  \### Vorstellung konkreter Technologien & Frameworks

  * Ruby on Rails
  * Spring Boot (moovel Group GmbH)
  * Docker (Akra GmbH)
  * Microservices (Wer liefert was GmbH)
  * NodeJS
  * AngularJS
  * Twitter Bootstrap

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}
  \## Ruby on Rails

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Überblick

  * Erste Version 1993
  * Verbreitet seit 2006 (durch Rails)
  * Objektorientiert
  * Interpretiert
  * Dynamisch getypt
  * "Script Sprache"

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Tradeoffs

  * Flexibilität vs. Sicherheit
  * Laufzeit-Effizienz vs. Produktivität

%section
  %h4 Ruby on Rails
  %h3 Ruby: Beispielcode
  %pre
    %code
      :preserve
        >> properties = ['object oriented', 'duck typed', 'productive', 'fun']
        => ["object oriented", "duck typed", "productive", "fun"]
        >> properties.each {|property| puts "Ruby is \#{property}."}
        Ruby is object oriented.
        Ruby is duck typed.
        Ruby is productive.
        Ruby is fun.

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Installation

  Installation via
  * OS Paketmanager
  * rvm
  * rbenv


%section
  %h4 Ruby on Rails
  %h3 Ruby: Programming Model
  %pre
    %code
      :preserve
        >> 4
        => 4
        >> 4.class
        => Fixnum
        >> 4 + 4
        => 8
        >> 4.methods
        => ["inspect", "%", "<<", "singleton_method_added", "numerator", ...
        "*", "+", "to_i", "methods", ...
        ]
  %h4 Alles ist ein Objekt

%section
  %h4 Ruby on Rails
  %h3 Ruby: Programming Model
  %pre
    %code
      :preserve
        >> x = 4
        => 4
        >> x < 5
        => true
        >> x <= 4
        => true
        >> x > 4
        => false
        >> false.class
        => FalseClass
        >> true.class
        => TrueClass
  %h4 Alles ist ein Objekt

%section
  %h4 Ruby on Rails
  %h3 Ruby: Programming Model
  %pre
    %code
      :preserve
        >> 4 + 'four'
        TypeError: String can't be coerced into Fixnum
        from (irb):51:in `+'
        from (irb):51
        >>
        =>
        >>
        =>
        4.class
        Fixnum
        (4.0).class
        Float
        >> 4 + 4.0
        => 8.0
  %h4 Duck Typing

%section
  %h5 Ruby on Rails
  %h4 Ruby: Programming Model
  %pre
    %code
      :preserve
        If it walks like a duck and quacks like a duck, it’s a duck.
  %ul
    %li Dynamische Typisierung: Zur Ausführungszeit interpretiert
    %li Starke Typisierung: Typsicherheit

%section{"data-markdown" => ""}
  \#### Ruby on Rails
  \### Ruby: Metamodel
  ![](/images/metamodel.png)

%section
  %h5 Ruby on Rails
  %h4 Ruby: Programming Model
  %pre
    %code
      :preserve
        class Tree
          attr_accessor :children, :node_name

          def initialize(name, children=[])
            @children = children
            @node_name = name
          end

          def visit_all(&block)
            visit &block
            children.each {|c| c.visit_all &block}
          end

          def visit(&block)
            block.call self
          end
        end


%section
  %h5 Ruby on Rails
  %h4 Ruby: Programming Model
  %pre
    %code
      :preserve
        module ToFile
          def filename
            "object_#{self.object_id}.txt"
          end
          def to_f
            File.open(filename, 'w') {|f| f.write(to_s)}
          end
        end

        class Person
          include ToFile
          attr_accessor :name

          def initialize(name)
            @name = name
          end
          def to_s
            name
          end
        end

%section{"data-markdown" => ""}
  \### Ruby: Literaturempfelungen

  * Programming Ruby 1.9 & 2.0 (Dave Thomas / Andy Hunt)
  * Practical Object-Oriented Design in Ruby (Sandy Metz)
  * Confident Ruby: 32 Patterns for Joyful Coding (Avdi Grimm)

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Geschichte

  * 2004: Entwickelt als Basis für *Basecamp*
  * Version 1.0 (2005)
  * Version 1.1 (2006) - Scripting Engines, Performance
  * Version 1.2 (2007) - REST Support, MIME-type routing, UTF-8
  * Version 2.0 (2007) - REST als Default
  * Version 2.1 (2008) - Named Scopes, Migrationen mit Timestamp
  * Version 2.2 (2008) - Internationalisierung, Threadsicherheit
  * Version 2.3 (2009) - Template Engine
  * Version 3.0 (2010) - Modularisierung: Einzelne Teile verwendbar
  * Version 3.1 (2011) - Asset Pipeline
  * Version 4.0 (2013)
  * Version 5.0 (2016)

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Bestandteile

  * Active Support: Ruby-Erweiterungen von Rails
  * Active Record: Objektabstraktionsschicht (ORM)
  * Action Pack: Request-Behandlung und Response-Ausgabe.
  * Action View: Templates
  * Action Mailer: E-Mail-Versand und -Empfang
  * Active Resource: Routing, REST, XML-RPC

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen

  * Basiert auf Ruby
  * Model-View-Controller Architektur
  * „Don’t repeat yourself“
  * „Convention over Configuration“
  * Scaffolding
  * Datenbankmigrationen

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### „Don’t repeat yourself“

  * Jede Information sollte nur ein einziges Mal vorhanden sein
  * z.B. ActiveRecord liest das DB-Scheme direkt aus der DB
  * z.B. Rails erstellt für das Model automatisch Getter- und Setter-Methoden
  * Vorteil: Informationen werden nicht inkonsistent wenn eine Stelle verändert wird


%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### „Convention over configuration“

  * Rails erwartet sinnvolle Standardwerte
  * --> z.B. Primärschlüssel einer Tabelle ist ID vom Typ Integer
  * --> ein Modell mit dem Namen Customer liegt in der Datei \#{Rails.root}/app/models/customer.rb
  * --> Die zugehörige Tabelle heißt customers heißt

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Grundlagen
  \### Scaffolding

  * Es gibt Generatoren für alle Standardfälle
  * Models, Controller, Views, Mailer, Migrationen, ...
  * Konventionen werden eingehalten
  * Web-Anwendungen lassen sich sehr schnell entwickeln
  * Wenn in der Datenbank etwa ein Feld hinzugefügt wird, erscheint es auch sofort in der entsprechenden View/New/Edit-Ansicht.
  * Scaffolding ist vor allem für Prototyping gedacht

%section{"data-markdown" => ""}
  \#### Ruby on Rails: Ein Beispiel

  * https://github.com/railstutorial/sample_app_rails_4
  * https://www.railstutorial.org/
  * https://www.railstutorial.org/book

%section{"data-markdown" => ""}
  \## Fragen?

%section{"data-markdown" => ""}

  \#### Vorbereitung auf Klausuraufgaben

  * Was ist ein Framework?
  * Nennen sie drei Vorteile für die Verwendung von Frameworks!
  * Wann ist die Verwendung eines Frameworks sinnvoll?
  * Nennen sie drei Auswahlkriterien für Frameworks!
  * Für welche Systeme wird das Microkernel Architekturmuster typischerweise verwendet?
  * Was ist der Grundgedanke hinter dem "Software Guidebook"?

%section{"data-markdown" => ""}
  \## Fragen?

  \##### Unterlagen: [ai2016.nils-loewe.de](https://ai2016.nils-loewe.de)
