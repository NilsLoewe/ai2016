---
title: Vorlesung 2
layout: slide
---

%section{"data-markdown" => ""}
  \## Architektur von Informationssystemen
  \#### Hochschule für angewandte Wissenschaften
  \#### Sommersemester 2016
  Nils Löwe / [nils@loewe.io](mailto:nils@loewe.io) / @NilsLoewe

%section{"data-markdown" => ""}
  \#### Raumänderung

  Die Vorlesung findet jetzt in Raum 1060 statt!

%section{"data-markdown" => ""}
  \### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \### Wiederholung
  \### Was ist Softwarearchitektur?


%section{"data-markdown" => ""}
  \## Was ist Architektur?

  * Der Begriff stammt aus dem Mittelalter
  * Oberbegriff für Baustil / Baukunst
  * Ziel: Ordnung und Generalisierung struktureller Beziehungen in Produkten des Bauwesens
  * Ziel: Erfahrung und Wissen verallgemeinern.

%section{"data-markdown" => ""}
  ![](/images/arch_defense_2.jpg)

%section{"data-markdown" => ""}
  The software architecture of deployed software is determined by those aspects that are the hardest to change. *(Chris Verhoef)*

%section{"data-markdown" => ""}
  \### Architektur besteht aus Strukturen
  * die Komponenten (Bausteine), aus denen ein System besteht
  * die wesentlichen (extern sichtbaren) Eigenschaften dieser Komponenten
  * die Beziehungen der Komponenten untereinander

%section{"data-markdown" => ""}
  \### Architektur basiert auf Entwurfsentscheidungen
  * Entscheidungen zum Entwurf der Komponenten
  * Entscheidung für eine bestimmte Technologie

%section{"data-markdown" => ""}
  \### Architektur besteht aus verschiedenen *Sichten*
  * jede Sicht dokumentiert einzelne Aspekte des Gesamtsystems
  * jede Sicht ist für bestimmte Stakeholder nützlich

%section{"data-markdown" => ""}
  \### Architektur ist Abstraktion
  * Essenzielle Aufgabe von Architekten: Weglassen von nicht benötigten Informationen
  * Informationen werden bewusst gefiltert um die Darstellung lesbar und verständlich zu halten

%section{"data-markdown" => ""}
  \### Architektur vs. Entwurf/Design?
  * die Grenze ist fließend
  * Design (oder Entwurf) bezeichnet den Prozess der Erstellung der Architektur

%section{"data-markdown" => ""}
  "Das Leben von Software-Architekten besteht aus einer langen und schnellen Abfolge suboptimaler Entwurfsentscheidungen, die meist im Dunkel getroffen werden."
  %br
  (Phillipe Kruchten)

%section{"data-markdown" => ""}
  \### Architekten beraten
  * Management und Auftraggeber bei der Projektplanung und -Organisation
  * Auftraggeber und Analyseteams zu Machbarkeit, Kosten/Nutzen, Auswirkungen von Anforderungen, Realisierung und Betrieb
  * Projektleiter bei der Organisaton und Steuerung des Implementierungsteams
  * Projektleiter beim Managment (technischer) Risiken
  * das Implementierungsteam bei der Umsetzung
  * Hardware-Architekten und Systembetreiber hinsichtlich Hardware-Anforderungen
  * die Qualitätssicherung über Kritikalität und Testbarkeit von Systembestandteilen

%section{"data-markdown" => ""}
  \### Architekten dokumentieren - angemessen
  * an den Bedürfnissen der Adressaten orientieren
  * pragmatisch arbeiten (manchmal reicht eine Skizze auf einem alten Umschlag)
  %br
  *Die Projekte sollen agil, flexibel und kurzfristig wandlungsfähig bleiben!*

%section{"data-markdown" => ""}
  "Die zuverlässigste, preiswerteste und robusteste Komponente eines Systems ist diejenige, die erst gar nicht realisert werden muss!"
  %br
  (Gernot Starke)

%section{"data-markdown" => ""}
  \### Architekten bewerten
  %br
  An welchen Stellen des Systems sind nicht-funktionale Anforderungen (z.B. Performance) riskant oder kritisch?

%section{"data-markdown" => ""}
  \### Architekturen entstehen in Zyklen und Iterationen
  %br
  ![](/images/moving_target.png)
  %br
  Bildquelle: Starke / "Effektive Softwarearchitekturen" (5. Auflage)

%section{"data-markdown" => ""}
  \### Wie Architekturen nicht entstehen sollten
  * im Architekturkomitee, das jeden Donnerstag um 15 Uhr im großen Besprechungsraum tagt
  * im Elfenbeinturm ohne Kunden, Auftraggeber, Projektleitung und Realisierungsteam
  * ausschließlich auf bunten Marketing-Folien
  * "Wir machen jetzt {Name-der-Technologie}!"

%section{"data-markdown" => ""}
  \### Ergebnisse der Umfrage

%section{"data-markdown" => ""}
  Wieviel Vorwissen haben Sie zu den einzelnen Bereichen?
  %br
  ![](/images/vorwissen.png)

%section{"data-markdown" => ""}
  Welche Schwerpunkt wünschen Sie sich?
  %br
  ![](/images/aufteilung.png)

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \### Geschichte und Trends
  \#### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \#### Seit wann gibt es den Begriff der Softwarearchitektur?

  \### Konferenz über Softwaretechnik in Rom
  %br
  %i Software Engineering Techniques. Report of a Conference Sponsored by the NATO Science Committee. Scientific Affairs Division, NATO, 1970, S. 12.

%section{"data-markdown" => ""}
  \#### Warum?

  Die Systeme wurden in den 1960ern so komplex, dass sie von mehreren Teams entwickelt werden mussten.

%section
  %h4 Beispiel: IBM OS/360

  %h3 Planung
  %ul
    %li Entwicklungskosten: 40 Mio. USD
    %li Lines of Code: 1 Mio.
    %li Fertigstellung: 1965

%section

  %h4 Beispiel: IBM OS/360

  %h3 Realität
  %ul
    %li Entwicklungskosten: 500 Mio. USD (Faktor 12,5)
    %li Lines of Code: 10 Mio. (Faktor 10)
    %li Fertigstellung: 1967 (2 Jahre zu spät)

%section

  %h4 Beispiel: IBM OS/360

  %h3 Fun Facts
  %ul
    %li PCP: Primary Control Program (genau ein Task ausführbar)
    %li MFT: Multiprogramming with a Fixed number of Tasks (Anzahl Tasks fest vorgegeben)
    %li MVT: Multiprogramming with a Variable number of Tasks (Echte dynamische Speicherverwaltung)

%section

  %h4 Beispiel: IBM SYSTEM/360

  %h3 Mainframes damals und heute

  %ul
    %li Mainframes verwalten heute 80 % aller Unternehmensdaten
    %li Mainframes verarbeiten heute täglich 30 Mrd. Unternehmenstransaktionen (z.B. Banking, Flugbuchungen, ...)
    %li Modell EC12 (2012): 5,5GHz CMOS Prozessor, 3 TB Ram
    %li Erstes Modell damals: 0,0018 MIPS, 8 KByte Ram
    %li Vergleich: Ein iPhone 5S schafft 18200 MIPS

%section{"data-markdown" => ""}
  \#### 1968: IBM System/360 m85
  ![](/images/ibm360m85.jpg)

%section{"data-markdown" => ""}
  \#### 2012: IBM EC12
  ![](/images/EC12.png)

%section{"data-markdown" => ""}
  \### Märchenstunde

%section{"data-markdown" => ""}
  \### Softwarearchitektur im Lauf der Zeit

%section{"data-markdown" => ""}
  \#### Softwarearchitektur im Lauf der Zeit

  \#### Erste Beschreibung von "Dekomposition, Zerlegung, Entwurf"

  * 1970er: Eher im Kontext von Hardware genutzt
  * 1972:  *"On the criteria to be used in decomposing systems into modules"* von D. L. Parnas
  * 1975: *"The Mythical Man Month"* von Frederick Brooks


%section{"data-markdown" => ""}
  \#### Softwarearchitektur im Lauf der Zeit
  \#### Unabhängiges Teilgebiet der Softwaretechnik
  \#### Konzept der Schnittstellen und Konnektoren

  * 1992: *"Foundations for the Study of Software Architecture"* von Dewayne Perry und Alexander Wolf
  * 1995: *"Software Architecture Analysis Method"* des Software Engineering Institute

%section{"data-markdown" => ""}
  \#### Softwarearchitektur im Lauf der Zeit
  \#### Allgemeine Verbreitung und "Stand der Technik"

  * 2000: *"IEEE 1471:2000 Norm Recommended Practice for Architectural Description of Software-Intensive Systems"*
  * 2003: Zertifizierung als Softwarearchitekt durch die iSAQB (International Software Architect Qualification Board)
  * 2003: UML 2.0 ist geeignet um Softwarearchitekturen zu beschreiben

%section{"data-markdown" => ""}
  \### Pioniere der Softwarearchitektur

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### David Parnas
  ![](/images/david_parnas.jpg)
  \##### * 10. Februar 1941, New York

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### David Parnas
  \### Erfinder des *Modulkonzepts* und des *Geheimnisprinzips*
  \### Schaffung der Grundlage der *objektorientierten Programmierung*

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Frederick Brooks
  ![](/images/fred_brooks.jpg)
  \##### * 19. April 1931, North Carolina

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Frederick Brooks

  \##### Schrieb das erste 'ehrliche' Buch über Software-Projektmanagement

  \#### *“Adding manpower to a late software project makes it later.”*
  \##### (The Mythical Man Month: Essays on Software Engineering)


%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Tony Hoare
  ![](/images/tony_hoare.jpg)
  \##### * 11. Januar 1934, Sri Lanka

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Tony Hoare

  * Entwickler des Quicksort-Algorithmus
  * Erfinder des Hoare-Kalküls zum Beweisen der Korrektheit von Algorithmen
  * Entwickler der Prozessalgebra *Communicating Sequential Processes (CSP)*, Grundlage der Programmiersprachen Ada, Occam und Go

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Edsge Dijkstra
  ![](/images/edsger_wybe_dijkstra.jpg)
  \##### * 11. Mai 1930, Rotterdam
  \##### † 6. August 2002, Nuenen


%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Edsge Dijkstra

  * Entwickler des Dijkstra-Algorithmus zur Berechnung eines kürzesten Weges in einem Graphen
  * Einführung von Semaphoren zur Synchronisation zwischen Threads
  * Entwicklung des Shunting-yard-Algorithmus zur Übertragung der Infixnotation n einen abstrakten Syntaxbaum
  * Entwickler des Multitasking-Betriebssystem THE, erste dokumentierte Schichtenstruktur
  * Mitentwickler von Algol 60 - Schrieb den den ersten Compiler dafür

  \#### Prägung der Begriffe der strukturierten Programmierung der *Softwarekrise*


%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Per Brinch Hansen
  ![](/images/per_brinch_hansen.jpg)
  \##### * 13. November 1938 in Frederiksberg
  \##### † 31. Juli 2007

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Per Brinch Hansen

  * Entwickler des RC-4000-Minicomputer und dessen Betriebssystems (1969): Erste Implementierung des Mikrokern-Konzepts
  * Erfinder des Monitor-Konzepts für das Concurrent Programming
  * Entwickler von *Concurrent Pascal*, der ersten nebenläufigen Programmiersprache
  * Entwickler von *SuperPascal* zur Darstellung paralleler Algorithmen
  * Von Per Brinch Hansen stammt die dänische Bezeichnung *Datamat* für Computer

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Friedrich Bauer
  ![](/images/friedrich_ludwig_bauer.jpg)
  \##### * 10. Juni 1924 in Regensburg
  \##### † 26. März 2015

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Friedrich Bauer

  * Erfinder des Stack-Konzepts ("Kellerspeichers")
  * Hielt 1967 an der Technischen Universität München die erste offizielle Informatikvorlesung in Deutschland
  * Ausrichter der ersten Computerausstellung im Deutschen Museum 1988
  * Autor mehrerer Standardwerke zur Kryptologie

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Niklaus Wirth
  ![](/images/niklaus_wirth.jpg)
  \##### * 15. Februar 1934 in Winterthur

%section{"data-markdown" => ""}
  \#### Pioniere der Softwarearchitektur
  \### Niklaus Wirth

  *  Erfinder des *Wirthschen Gesetzes*, nach dem sich die Software schneller verlangsamt als sich die Hardware beschleunigt.
  * Mitentwickler Programmiersprache Euler
  * Entwickler derProgrammiersprache PL360, die 1968 auf dem System IBM /360 implementiert wurde
  * Mitentwickler der Programmiersprache Algol
  * Entwickler der Programmiersprache Pascal
  * Erweiterung der formalem Sprache Backus-Naur-Form (BNF), zur Erweiterten Backus-Naur-Form (EBNF)
  * Entwickler von Modula, Modula-2 und Oberon (1985–1990)

  \##### "Importierte" 1980 eine der ersten Computermäuse nach Europa, was zur Gründung von Logitech führte

%section{"data-markdown" => ""}
  \### Tools und Frameworks im Laufe der Zeit

%section{"data-markdown" => ""}
  \#### Tools und Frameworks im Laufe der Zeit
  \### Entwicklung des linux-kernels

  * 1992: V 0.0.1 / 8k LOC / 230 kB
  * 1994: V 1.0.0 / 170k LOC / 1.2 MB
  * 1996: V 2.0.0 / 716k LOC / 5.8 MB
  * 2011: V 3.0.0 / 14.6 Mio. LOC / 96 MB
  * 2015: V 4.0.0 / 19.3 Mio. LOC / 78 MB

%section{"data-markdown" => ""}
  \#### Tools und Frameworks im Laufe der Zeit
  \### Entwicklung des linux-kernels
  ![](/images/linux.png)

%section{"data-markdown" => ""}
  \#### Tools und Frameworks im Laufe der Zeit
  \### Entwicklung des linux-kernels
  ![](/images/linux2.png)

%section{"data-markdown" => ""}
  \#### Tools und Frameworks im Laufe der Zeit
  \### Entwicklung von Ruby on Rails

  * 2005: V 1.0.0 / 96k LOC / 3365 Klassen / 8523 Methoden
  * 2007: V 2.0.0 / 170k LOC / 5255 Klassen / 13260 Methoden
  * 2010: V 3.0.0 / 230k LOC / 8334 Klassen / 19785 Methoden
  * 2013: V 4.0.0 / 317k LOC / 9430 Klassen / 24143 Methoden

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \### Warum überhaupt Sichten?
  %br
  \#### *"Es ist eine offensichtliche Wahrheit, dass auch eine perfekte Architektur nutzlos bleibt, wenn sie nicht verstanden wird..."*
  %br
  Felix Bachmann und Len Bass in "Software Architecture Documentation in Practice"

%section{"data-markdown" => ""}
  \## 1.
  \#### Eine einzelne Darstellung kann die Vielschichtigkeit und Komplexität einer Architektur nicht ausdrücken.
  %br
  \#### - Genauso wenig, wie man nur mit einem Grundriss ein Haus bauen kann.

%section{"data-markdown" => ""}
  \## 2.
  \#### Sichten ermöglichen die Konzentration auf einzelne Aspekte des Gesamtsystems und reduzieren somit die Komplexität der Darstellung.

%section{"data-markdown" => ""}
  \## 3.
  \#### Die Projektbeteiligten haben ganz unterschiedliche Informationsbedürfnisse.


%section{"data-markdown" => ""}
  \#### Architekten müssen Projektbeteiligten die Architektur erklären bzw. sie verteidigen/vermarkten
  * die entworfenen Strukturen
  * die getroffenen Entscheidungen
  * ihre Konzepte + Begründungen + Vor- und Nachteile
  %br
  &rarr; Mit Hilfe von unterschiedlichen Sichten lassen sich viele Aspekte von Architektur verständlich darstellen.

%section{"data-markdown" => ""}
  \#### Beispiel: Gebäudearchitektur
  ![](/images/3d-haus.jpg)

%section{"data-markdown" => ""}
  \#### Beispiel: Gebäudearchitektur
  ![](/images/grundriss_1.jpg)

%section{"data-markdown" => ""}
  \#### Beispiel: Gebäudearchitektur
  ![](/images/frontansicht.jpg)

%section{"data-markdown" => ""}
  \#### Beispiel: Gebäudearchitektur
  ![](/images/elektro.png)

%section{"data-markdown" => ""}
  \#### So erreichen Architekten ein gemeinsames Verständnis der Architektur innerhalb des Teams
  ![](/images/kommunikationsaufgabe.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke


%section{"data-markdown" => ""}
  \#### Überblick über die vier Sichten
  ![](/images/vier_sichten_auf_architektur.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \## Kontextsicht
  * Wie ist das System in seine Umgebung eingebettet?
  * zeigt das System als Blackbox in seinem Kontext aus der Vogelperspektive

%section{"data-markdown" => ""}
  \### Kontextsicht - Enthaltene Informationen:
  * Schnittstellen zu Nachbarsystemen
  * Interaktion mit wichtigen Stakeholdern
  * wesentliche Teile der umgebenden Infrastruktur

%section{"data-markdown" => ""}
  \#### Kontextsicht - Beispiel
  ![](/images/kontextsicht_beispiel.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \#### Kontextsicht - Beispiel
  ![](/images/kontext_1.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Kontextsicht - Beispiel
  ![](/images/kontext_2.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Kontextsicht - Beispiel
  ![](/images/kontext_3.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner


%section{"data-markdown" => ""}
  \## Bausteinsicht
  * Wie ist das System intern aufgebaut?
  * unterstützt Auftaggeber und Projektleiter bei der Projektüberwachung
  * dienent der Zuteilung von Arbeitspaketen
  * dient als Referenz für Software-Entwickler

%section{"data-markdown" => ""}
  \### Bausteinsicht - Enthaltene Informationen:
  * statische Strukturen der Bausteine des Systems
  * Subsysteme
  * Komponenten und deren Schnittstellen

%section{"data-markdown" => ""}
  \#### Bausteinsicht - Beispiel
  ![](/images/bausteinsicht_beispiel.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \#### Bausteinsicht - Beispiel
  ![](/images/baustein_1.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Bausteinsicht - Beispiel
  ![](/images/baustein_2.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Bausteinsicht - Beispiel
  ![](/images/baustein_3.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \## Laufzeitsicht
  * Wie läuft das System ab?
  * Welche Bausteine des Systems existieren zur Laufzeit?
  * Wie wirken die Bausteine zusammen?

%section{"data-markdown" => ""}
  \#### Laufzeitsicht - Beispiel
  ![](/images/laufzeitsicht_beispiel.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \#### Laufzeitsicht - Beispiel
  ![](/images/laufzeitsicht_beispiel2.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \#### Laufzeitsicht - Beispiel
  ![](/images/laufzeit_1.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Laufzeitsicht - Beispiel
  ![](/images/laufzeit_2.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \##  Verteilungssicht / Infrastruktursicht
  * In welcher Umgebung läuft das System ab?
  * zeigt das System aus Betreibersicht

%section{"data-markdown" => ""}
  \### Verteilungssicht - Enthaltene Informationen:
  * Hardwarekomponenten: Rechner, Prozessoren
  * Netztopologien
  * Netzprotokolle
  * sonstige Bestandteile der physischen Systemumgebung

%section{"data-markdown" => ""}
  \#### Verteilungssicht - Beispiel
  ![](/images/verteilungssicht_beispiel.png)
  %br
  Bildquelle: "Effektive Softwarearchitekturen" von Gernot Starke

%section{"data-markdown" => ""}
  \#### Verteilungssicht - Beispiel
  ![](/images/deployment_1.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Verteilungssicht - Beispiel
  ![](/images/deployment_2.png)
  %br
  Bildquelle: "Softwarearchitekturen dokumentieren" von Stefan Zörner

%section{"data-markdown" => ""}
  \#### Was ist Softwarearchitektur?
  \#### Geschichte und Trends
  \### Sichten auf Architekturen
  \#### Qualiät und andere nichtfunktionale Anforderungen
  \#### Architekturmuster
  \#### Dokumentation von Architekturen
  \#### Technologien und Frameworks

%section{"data-markdown" => ""}
  \## Fragen?

  \##### Unterlagen: [ai2016.nils-loewe.de](https://ai2016.nils-loewe.de)
